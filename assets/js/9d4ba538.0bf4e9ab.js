"use strict";(globalThis.webpackChunk_upsetjs_docs=globalThis.webpackChunk_upsetjs_docs||[]).push([[2016],{2129:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var o=t(9703);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,h=p["".concat(i,".").concat(u)]||p[u]||m[u]||a;return t?o.createElement(h,s(s({ref:n},d),{},{components:t})):o.createElement(h,s({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2441:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>a,metadata:()=>s,toc:()=>l,default:()=>c});var o=t(9478),r=(t(9703),t(2129));const a={title:"Addons",slug:"/addons"},s={unversionedId:"addons/_index",id:"addons/_index",isDocsHomePage:!1,title:"Addons",description:"Similar to the original UpSet and UpSetR, UpSet allows to render boxplot for showing numerical aggregates of sets and set combinations.",source:"@site/docs/addons/_index.mdx",sourceDirName:"addons",slug:"/addons",permalink:"/docs/addons",editUrl:"https://github.com/upsetjs/upsetjs/edit/main/packages/docs/docs/addons/_index.mdx",version:"current",frontMatter:{title:"Addons",slug:"/addons"},sidebar:"someSidebar",previous:{title:"Themes + Colors",permalink:"/docs/components/themes"},next:{title:"BoxPlot",permalink:"/docs/addons/boxplot"}},l=[{value:"Install",id:"install",children:[]},{value:"Example",id:"example",children:[]}],i={toc:l};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Similar to the original UpSet and UpSetR, ",(0,r.kt)("inlineCode",{parentName:"p"},"UpSet")," allows to render boxplot for showing numerical aggregates of sets and set combinations."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @upsetjs/addons @upsetjs/react\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @upsetjs/addons @upsetjs/react\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction BoxPlot() {\n  const [selection, setSelection] = useState(null);\n\n  const elems = useMemo(\n    () => [\n      { name: '1', sets: ['one', 'two', 'three'], value: Math.random() },\n      { name: '2', sets: ['one', 'two'], value: Math.random() },\n      { name: '3', sets: ['one'], value: Math.random() },\n      { name: '4', sets: ['two'], value: Math.random() },\n      { name: '5', sets: ['one', 'two', 'three'], value: Math.random() },\n      { name: '6', sets: ['three'], value: Math.random() },\n      { name: '7', sets: ['one', 'three'], value: Math.random() },\n      { name: '8', sets: ['one', 'three'], value: Math.random() },\n      { name: '9', sets: ['three'], value: Math.random() },\n      { name: '10', sets: ['two', 'three'], value: Math.random() },\n      { name: '11', sets: ['one'], value: Math.random() },\n      { name: '12', sets: ['one', 'three'], value: Math.random() },\n      { name: '13', sets: ['one', 'three'], value: Math.random() },\n    ],\n    []\n  );\n  const { sets, combinations } = useMemo(() => extractCombinations(elems), [elems]);\n\n  return (\n    <UpSetJS\n      sets={sets}\n      combinations={combinations}\n      width={780}\n      height={500}\n      selection={selection}\n      onHover={setSelection}\n      setAddons={[boxplotAddon('value', elems)]}\n      combinationAddons={[boxplotAddon('value', elems, { orient: 'vertical' })]}\n    />\n  );\n}\n")))}c.isMDXComponent=!0}}]);