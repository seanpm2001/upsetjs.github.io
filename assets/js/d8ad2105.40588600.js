"use strict";(globalThis.webpackChunk_upsetjs_docs=globalThis.webpackChunk_upsetjs_docs||[]).push([[1866],{2129:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var o=t(9703);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,a=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=s,f=u["".concat(a,".").concat(d)]||u[d]||p[d]||i;return t?o.createElement(f,r(r({ref:n},m),{},{components:t})):o.createElement(f,r({ref:n},m))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,r=new Array(i);r[0]=u;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:s,r[1]=c;for(var l=2;l<i;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7131:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,metadata:()=>r,toc:()=>c,default:()=>l});var o=t(9478),s=(t(9703),t(2129));const i={title:"Combination Modes"},r={unversionedId:"components/modes",id:"components/modes",isDocsHomePage:!1,title:"Combination Modes",description:"Default",source:"@site/docs/components/modes.mdx",sourceDirName:"components",slug:"/components/modes",permalink:"/docs/components/modes",editUrl:"https://github.com/upsetjs/upsetjs/edit/main/packages/docs/docs/components/modes.mdx",version:"current",frontMatter:{title:"Combination Modes"},sidebar:"someSidebar",previous:{title:"Karnaugh Map",permalink:"/docs/components/karnaughmap"},next:{title:"Themes + Colors",permalink:"/docs/components/themes"}},c=[{value:"Default",id:"default",children:[]},{value:"Set Union",id:"set-union",children:[]},{value:"Distinct Set Intersection",id:"distinct-set-intersection",children:[]},{value:"Show Empty",id:"show-empty",children:[]},{value:"Two Sets Intersections",id:"two-sets-intersections",children:[]},{value:"Limit Top 10",id:"limit-top-10",children:[]},{value:"Sort By Degree",id:"sort-by-degree",children:[]},{value:"Sort By Set Group",id:"sort-by-set-group",children:[]}],a={toc:c};function l(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,o.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"default"},"Default"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      type: 'intersection',\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"set-union"},"Set Union"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      type: 'union',\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n      combinationName=\"Union Size\"\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"distinct-set-intersection"},"Distinct Set Intersection"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      type: 'distinctIntersection',\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n      combinationName=\"Distinct Intersection Size\"\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"show-empty"},"Show Empty"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      empty: true,\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"two-sets-intersections"},"Two Sets Intersections"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      min: 2,\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"limit-top-10"},"Limit Top 10"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      limit: 10,\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"sort-by-degree"},"Sort By Degree"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      order: 'degree:desc',\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")),(0,s.kt)("h2",{id:"sort-by-set-group"},"Sort By Set Group"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// import React from 'react';\n\nfunction Example() {\n  const [selection, setSelection] = React.useState(null);\n  const sets = GameOfThronesDataSet.sets;\n  const combinations = useMemo(\n    () => ({\n      order: ['group:asc', 'degree:desc'],\n    }),\n    []\n  );\n  return (\n    <UpSetJS\n      sets={sets}\n      width={780}\n      height={400}\n      selection={selection}\n      onHover={setSelection}\n      combinations={combinations}\n    />\n  );\n}\n")))}l.isMDXComponent=!0}}]);